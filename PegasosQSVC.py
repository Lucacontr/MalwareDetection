import time
import pandas as pd
from sklearn.model_selection import train_test_split, KFold
from imblearn.over_sampling import SMOTE
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.decomposition import PCA
from qiskit.circuit.library import ZFeatureMap
from qiskit import IBMQ
from qiskit_machine_learning.kernels import QuantumKernel
from qiskit_machine_learning.algorithms import PegasosQSVC
from qiskit import Aer
from qiskit.utils import QuantumInstance, algorithm_globals
from sklearn.svm import SVC

data = pd.read_csv("dataset/dataset.csv")
data = data.drop(columns='appeared')
data = data.drop('sha256', axis=1)
features = data.drop(columns='label').values
labels = data['label'].values

kf = KFold(n_splits=10, shuffle=True)
max = 0
train_features, train_labels, test_features, test_labels = [], [], [], []
for training_index, testing_index in kf.split(features):
    x_train, x_test = features[training_index], features[testing_index]
    y_train, y_test = labels[training_index], labels[testing_index]
    model = SVC(kernel="linear")
    model.fit(x_train, y_train)
    score = model.score(x_test, y_test)
    print(score, max)
    if score > max:
        max = score
        train_features = x_train
        train_labels = y_train
        test_features = x_test
        test_labels = y_test

# Feature Extraction
pca = PCA(2)
pca.fit(train_features)
train_features_pca = pca.transform(train_features)
test_features_pca = pca.transform(test_features)

# Data Balancing
sm = SMOTE()
train_features_bal, train_labels_bal = sm.fit_resample(train_features_pca, train_labels)

model = SVC(kernel="linear")
model.fit(train_features_bal, train_labels_bal)

num_qubits = 2

#Classification PegasosQSVC
tau = 100
C = 1000
algorithm_globals.random_seed = 12345
backend = QuantumInstance(Aer.get_backend("aer_simulator"))
feature_map = ZFeatureMap(feature_dimension=num_qubits, reps=1)
qkernel = QuantumKernel(feature_map=feature_map, quantum_instance=backend)
qsvc = PegasosQSVC(quantum_kernel=qkernel, C=C, num_steps=tau)

# training
print("Running...")
start_time = time.time()
qsvc.fit(train_features_bal, train_labels_bal)
total_time = time.time() - start_time
print("Train effettuato in " + str(total_time))

# testing
start_time = time.time()
y_predict = qsvc.predict(test_features_pca)
cm = confusion_matrix(test_labels, y_predict)
print(cm)
print(classification_report(test_labels, y_predict))
total_time = time.time() - start_time
print("Test effettuato in " + str(total_time))


