import time
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split, KFold
from imblearn.over_sampling import SMOTE
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier

data = pd.read_csv("dataset/dataset.csv")
data = data.drop(columns='appeared')
data = data.drop('sha256', axis=1)
features = data.drop(columns='label').values
labels = data['label'].values

kf = KFold(n_splits=10, shuffle=True)
max = 0
train_features, train_labels, test_features, test_labels = [], [], [], []
for training_index, testing_index in kf.split(features):
    #print("TRAIN:", training_index, "TEST:", testing_index)
    x_train, x_test = features[training_index], features[testing_index]
    y_train, y_test = labels[training_index], labels[testing_index]
    #model = SVC(kernel="linear")
    model = DecisionTreeClassifier()
    model.fit(x_train, y_train)
    score = model.score(x_test, y_test)
    print(score, max)
    if score > max:
        max = score
        train_features = x_train
        train_labels = y_train
        test_features = x_test
        test_labels = y_test

#Data Balancing
sm = SMOTE()
train_features_bal, train_labels_bal = sm.fit_resample(train_features, train_labels)

#Classification SVC
model = SVC(kernel="linear")
model.fit(train_features, train_labels)
y_predict = model.predict(test_features)
cm = confusion_matrix(test_labels, y_predict)
print("\n\n\nLinear SVC")
print(cm)
print(classification_report(test_labels, y_predict))

#Classification RandomForestClassifier
model = RandomForestClassifier()
model.fit(train_features, train_labels)
y_predict = model.predict(test_features)
cm = confusion_matrix(test_labels, y_predict)
print("\n\n\nRandom Forest")
print(cm)
print(classification_report(test_labels, y_predict))

#Classification DecisionTreeClassifier
model = DecisionTreeClassifier()
model.fit(train_features, train_labels)
y_predict = model.predict(test_features)
cm = confusion_matrix(test_labels, y_predict)
print("\n\n\nDecisionTreeClassifier")
print(cm)
print(classification_report(test_labels, y_predict))

#Classification KNeighborsClassifier
model = KNeighborsClassifier()
model.fit(train_features, train_labels)
y_predict = model.predict(test_features)
cm = confusion_matrix(test_labels, y_predict)
print("\n\n\nKNeighborsClassifier")
print(cm)
print(classification_report(test_labels, y_predict))
