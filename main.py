import time
import pandas as pd
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.svm import LinearSVC, SVC
from sklearn.decomposition import PCA
from qiskit.circuit.library import ZFeatureMap, ZZFeatureMap
from qiskit.utils import QuantumInstance, algorithm_globals
from qiskit import IBMQ
from qiskit_machine_learning.kernels import QuantumKernel
from qiskit_machine_learning.algorithms import PegasosQSVC, QSVC
from qiskit import BasicAer

class Classification(__name__):

    if __name__ == '__main__':
        data = pd.read_csv("dataset/dataset.csv")
        data = data.drop(columns='appeared')
        features = data.drop(columns='label')
        train_features, test_features, train_labels, test_labels = train_test_split(
            features, data['label'].values, test_size=0.20, shuffle=False)

        id_train = train_features['sha256']
        id_test = test_features['sha256']
        train_features = train_features.drop('sha256', axis=1)
        test_features = test_features.drop('sha256', axis=1)

        #Feature Extraction
        pca = PCA(24)
        pca.fit(train_features)
        train_features_pca = pca.transform(train_features)
        test_features_pca = pca.transform(test_features)

        #Data Balancing
        sm = SMOTE(random_state=42)
        train_features_bal, train_labels_bal = sm.fit_resample(train_features_pca, train_labels)

        print("\nX_train:\n")
        print(train_features_bal)
        print(train_labels_bal)

        #Classification SVC
        svmstruct = SVC(kernel="linear")
        start_time = time.time()
        svmstruct.fit(train_features_bal, train_labels_bal)
        svmaccr = (svmstruct.score(test_features_pca, test_labels)) * 100
        print("SVC accuracy: " + svmaccr.__str__())
        total_time = time.time() - start_time
        print("Train effettuato in " + str(total_time))

        """
        print("\nX_train:\n")
        print(x_train_pca)
        print("\nX_test:\n")
        print(x_test_pca)
        features, labels = make_blobs(n_samples=20, n_features=2, centers=2, random_state=3, shuffle=True)
        features = MinMaxScaler(feature_range=(0, numpy.pi)).fit_transform(features)
        train_features, test_features, train_labels, test_labels = train_test_split(
            features, labels, train_size=15, shuffle=False
        )"""

        #Classification QSVC
        num_qubits = 24
        tau = 100
        C = 1000
        algorithm_globals.random_seed = 12345
        IBMQ.enable_account("43a75c20e78cef978267a3bdcdb0207dab62575c3c9da494a1cd344022abc8a326ca1a9b7ee3f533bb7ead73a5f9fe519691a7ad17643eecbe13d1c8c4adccd2")
        provider = IBMQ.get_provider(hub="ibm-q")

        backend = QuantumInstance(
            #provider.get_backend("ibmq_qasm_simulator"),
            BasicAer.get_backend("statevector_simulator"),
            seed_simulator=algorithm_globals.random_seed,
            seed_transpiler=algorithm_globals.random_seed
        )

        feature_map = ZFeatureMap(feature_dimension=num_qubits, reps=1)

        qkernel = QuantumKernel(feature_map=feature_map, quantum_instance=backend)

        qsvc = PegasosQSVC(quantum_kernel=qkernel, C=C, num_steps=tau)
        #qsvc = QSVC(quantum_kernel=qkernel)

        # training
        print("Running...")
        start_time = time.time()
        qsvc.fit(train_features_bal, train_labels_bal)
        total_time = time.time() - start_time
        print("Train effettuato in " + str(total_time))
        # testing
        start_time = time.time()
        score = qsvc.score(test_features_pca, test_labels)
        print(f"QSVC classification test score: {score*100}")
        total_time = time.time() - start_time
        print("Test effettuato in " + str(total_time))


